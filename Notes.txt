---------Fetch--------
1. Call fetch(___) with a path to a file or site to retrieve data
2. Response in form of a promise, fetch function is asyncronous 
3. Retrieve data as text, blob, or JSON (or XML)
4. Make image element <img> with response data or parse your JSON data
    - Handle Errors
        Handle errors using a .catch()
    - use Async/Await instead of .then() possibly
        create an async function that has an await fetch() method inside, stored in a const.



-----------CSV------------
-Stands for comma seperated data, looks like:
    1. item, Cuteness
    2. puppy, 10
    3. kitten, 10 ...
- Libraries to parse CSV 
    D3
    P5.js - loadTable()
- After fetching data, need to convert to text();

- Libraries to chart data   
    D3  
    Chart.js -> will use this 


-----------JSON----------
- stands for JavaScript Object Notation
- Form will be :

object = {
    "one" : 1,
    "two" : 2,
    "three" : {
        "three.1" : 3.1,
    }
}

- after fetched, need to convert resonse to .json();

-----------Ways to fetch--------------

1) fetch()

    fetch('url').then(res=> {
        res.json();
    }).then(data => {
        console.log(data);
    }).catch(err => {
        console.log(err);
    })

        ------or------
    const fetchingData = async () => {
        const res = await fetch('url');
        const data = await res.json();
        console.log(data);
    }

2) jQuery

    $.ajax({
        url: url,
        type: "GET",
        success: function(data) {
            console.log(data);
        }
        error: function(err){
            console.log(err);
        }
    })

    ----or----

    $.get('url', (res, status) => {
        console.log(res, status);
    })

3) Axios

    axios.get(url).then(data => {
        console.log(data);
    })

-----------Ways to Post--------------

1) jQuery

    $.ajax({
        type: "POST"
        url: url,
        data: data (in object format)
        success: function(res){
            console.log(res);
        }
    });

    $.post(url, data, function(res, status) {
        console.log(res, status);
    })

2) Axios 

    axios({
        method: 'post',
        url : url,
        data : {}
    }).then(res => {
        console.log(res);
    })


--------------Using node and express to serve website--------------

- install express npm install express
- inside of the file you intend to serve from (js file) require express and creat app with const app = express();
- you can then listen on a port serving some file with: 
    app.listen(3001, console.log('listening at 3001'))  //listen at port of choosing
    app.use(express.static('public'));
- JS that is used for html files is rendered in client and sent as raw text, JS ran on server is never seen my client
- generally want to authenticate on the server, if authentication on the client then the client could minipulate
- On the server side, you can use app.post('/url', (request, response) => { deal with request }) to handle posts to the server
- nedb is a lightweight local database https://github.com/louischatriot/nedb
- 

